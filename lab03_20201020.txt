class Node:
 def __init__(self, e, n):
   self.element = e
   self.next = n
 
class LinkedList:
  def __init__(self, a):
  
 #  Design the constructor based on data type of a. If 'a' is built in python list then
 #  Creates a linked list using the values from the given array. head will refer
 #  to the Node that contains the element from a[0]
 #  Else Sets the value of head. head will refer
 # to the given LinkedList


 # Hint: Use the type() function to determine the data type of a
   self.head = None
   self.array=a
   #n=head
   # To Do


   #self.head = None
   if type(a)==list:
     self.head = Node(a[0],None)
     tail = self.head
    
     for i in range(1,len(a)):
       n = Node(a[i],None)
       tail.next = n
       tail = n


   else:
     self.head = a
      
  






   #pass # Remove this line
  # Count the number of nodes in the list
 def countNode(self):
   count = 0
   store = self.head
   while store!=None:
     count+=1
     store = store.next
   return count
  # Print elements in the list
 def printList(self):
   node = self.head
  
   while node != None:
     if node.next==None:
       print(node.element)
       node = node.next
     else:
       print(node.element, end = ", ")
       node = node.next
  
  


 # returns the reference of the Node at the given index. For invalid index return None.
 def nodeAt(self, idx):
   self.idx = idx
   store = self.head
   count = 0
   obj = None
   while store!=None:


     if count==self.idx:
       obj = store
       return obj
     store = store.next
     count+=1
   if obj == None:
     print("invalid index")
   return obj 
   # To Do
   #pass # Remove this line
  # returns the element of the Node at the given index. For invalid idx return None.
 def get(self, idx):
   count = 0
   store = self.head
   while store != None:
     if count == idx:
       return store.element
     count+=1
     store = store.next
   return -1
  
  
 def set(self, idx, elem):
   count = 0
   store = self.head
   while store != None:
     if count==idx:
       store.element = elem
     count+=1
     store = store.next


 # returns the index of the Node containing the given element.
 # if the element does not exist in the List, return -1.
 def indexOf(self, elem):
   i = 0
   store = self.head
   while store != None:
     if store.element == elem:
       return i
     i = i+1
     store = store.next
   return -1


  # returns true if the element exists in the List, return false otherwise.
 def contains(self, elem):
   store=0
   while self.head!= None:
     if self.head.element==elem:
       store+=1
       return True
     self.head=self.head.next
   if store==0:
     return False


 # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
 def copyList(self):
   newhead = None
   newtail = None
   store=self.head
  
   while store!=None:
     newNode = Node(store.element, None)
     copyN = newNode
     if newhead == None:
       newhead = newNode
       newtail = newhead
    
     else:
       newtail.next=newNode
       newtail=newNode
     store = store.next
   return newhead
  
 # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
 def reverseList(self):
   newHead = None
   store = self.head
  
   while store!=None:
       newNode = Node(store.element, None)
       newNode.next = newHead
       newHead =  newNode
       store = store.next


   return newHead
  # inserts Node containing the given element at the given index
 # Check validity of index.
 def insert(self, elem, idx):
   store=self.head
   self.size=len(self.array)
   if (idx < 0 or idx > self.size):
     print("invalid index")
   newNode=Node(elem,None)
   if idx!=0:
     pred = self.nodeAt(idx-1)
     newNode.next = pred.next
     pred.next = newNode
   else:
     newNode.next = self.head
     self.head = newNode




 # removes Node at the given index. returns element of the removed node.
 # Check validity of index. return None if index is invalid.
 def remove(self, idx):
   self.size = len(self.array)
   if (idx<0 or idx>=self.size):
       return("Invalid index")
   removedNode = None
   if (idx==0):
       removedNode = self.head
       self.head = self.head.next
   else:
       pred = self.nodeAt(idx-1)
       removedNode = pred.next
       pred.next = removedNode.next
  
   return removedNode.element
  # Rotates the list to the left by 1 position.
 def rotateLeft(self):
   store = self.head
   self.head = store.next
   newtail = self.head


   while newtail.next!=None:
       newtail = newtail.next


   newtail.next = store
   store.next = None
 
 # Rotates the list to the right by 1 position.
 def rotateRight(self):
   store = self.head
   newtail = store.next


   while store.next!= None:
       newtail = store
       store = store.next
      
   store.next = self.head
   self.head = store
   newtail.next = None
print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]


h1.printList() # This should print: 10,20,30,40
print(h1.countNode()) # This should print: 4


print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
  
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None.
  
  
print("////// Test 04 //////")
  
# updates the element of the Node at the given index.
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
       
print(h1.set(1,85)) # This should print: 20
h1.printList() # This should print: 10,85,30,40.
print(h1.set(15,85)) # This should print: None
h1.printList() # This should print: 10,85,30,40.
  
print("////// Test 05 //////")
# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
  
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)
print(ask) # This should print: True.
  
  
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70. 
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist
h3.printList() # This should print: 10,20,30,40,50,60,70. 
  
print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list
h4.printList() # This should print: 10,20,30,40,50. 
# Makes a reversed copy of the given List. Returns the head reference of the reversed list.
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist
h5.printList() # This should print: 50,40,30,20,10. 
  
print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
h6.printList() # This should print: 10,20,30,40. 
  
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40. 
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40. 
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75.
  
  
  
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
h7.printList() # This should print: 10,20,30,40,50,60,70. 
  
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
  
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
h7.printList() # This should print: 20,30,40,50,60,70. 
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
h7.printList() # This should print: 20,30,40,60,70. 
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
h7.printList() # This should print: 20,30,40,60.
  
  
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
h8.printList() # This should print: 10,20,30,40. 
  
# Rotates the list to the left by 1 position.
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10. 
  
  
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list
h9.printList() # This should print: 10,20,30,40. 
  
# Rotates the list to the right by 1 position.
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30.


Output:
////// Test 01 //////
10, 20, 30, 40
4
////// Test 02 //////
20
////// Test 03 //////
30
////// Test 04 //////
None
10, 85, 30, 40
None
10, 85, 30, 40
////// Test 05 //////
3
////// Test 06 //////
True
////// Test 07 //////
10, 20, 30, 40, 50, 60, 70
10, 20, 30, 40, 50, 60, 70
////// Test 08 //////
10, 20, 30, 40, 50
50, 40, 30, 20, 10
////// Test 09 //////
10, 20, 30, 40
85, 10, 20, 30, 40
85, 10, 20, 95, 30, 40
invalid index
85, 10, 20, 95, 30, 40, 75
////// Test 10 //////
10, 20, 30, 40, 50, 60, 70
Removed element: 10
20, 30, 40, 50, 60, 70
Removed element:  50
20, 30, 40, 60, 70
Removed element:  70
20, 30, 40, 60
////// Test 11 //////
10, 20, 30, 40
20, 30, 40, 10
////// Test 12 //////
10, 20, 30, 40
40, 10, 20, 30