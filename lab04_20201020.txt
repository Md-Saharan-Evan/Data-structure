class Node:
 def __init__(self, e, n, p):
   self.element = e
   self.next = n
   self.prev = p
class DoublyList:
  def __init__(self, a):
 #  Design the constructor based on data type of a. If 'a' is built in python list then
 #  Creates a linked list using the values from the given array.
   self.head = None
   self.arr=a
   self.tail=None
   self.size=0
   self.count=0
   head = Node(None,None,None)
   head.next = head.prev = head
   tail = head.prev


   if type(self.arr)==list: #10,20,30,40
     self.head=Node(a[0],None,None)
     self.tail=self.head
     self.count+=1


     for i in range(1,len(self.arr)):
      
       store=Node(a[i],None,None)
       self.tail.next=store
       store.prev=self.tail
       self.tail=store
       head.prev=self.tail
      
       self.count+=1
   else:
     self.head = self.arr


 # Counts the number of Nodes in the list
 def countNode(self):
   return self.count
  # prints the elements in the list
 def forwardprint(self):
   store = self.head
  
   while store is not None:
     if store.next==None:
       print(store.element)
       store = store.next
     else:
       print(store.element, end = ", ")
       store = store.next


 # prints the elements in the list backward
 def backwardprint(self): #10,20,30,40,50
   store=self.head.prev=self.tail


   while store != self.head:
    
    
     if store==self.head:
       print(store.element)
       store = store.prev
     else:
      
       print(store.element, end = ", ")
       store = store.prev
   print(self.head.element)




  


 # returns the reference of the at the given index. For invalid index return None.
 def nodeAt(self, idx):
   self.idx = idx
   store = self.head
   count = 0
   obj = None
   while store!=None:


     if count==self.idx:
       obj = store
       return obj
     store = store.next
     count+=1
   if obj == None:
     print("invalid index")
   return obj
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
 def indexOf(self, elem):
   count = 0
   n = self.head
   while n is not n.prev:
     if n.element == elem:
       return count
    
     count+=1
     n = n.next
   if elem==n.prev:
     count+=1
     return count
   return -1


 # inserts containing the given element at the given index Check validity of index.
 def insert(self, elem, idx):
   self.element=elem
   store=self.head
   store=self.head.prev=self.tail
   self.size=len(self.arr)
   if (idx < 0 or idx > self.size):
     print("invalid index")
   newNode=Node(elem,None,None)
   if idx!=0:
    
     pred = self.nodeAt(idx-1)
     newNode.next = pred.next
     pred.next = newNode
     newNode.prev=pred
   else:
     newNode.next = self.head
     self.head = newNode
     newNode.prev=self.tail
    
     self.head.element=newNode.element
  
 # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
 def remove(self, idx):
  
   self.size = len(self.arr)
   if (idx<0 or idx>=self.size):
       return("Invalid index")
   removedNode = None
   if (idx==0):
       print("here")
       removedNode = self.head
      
       self.head = self.head.next
   else:
       pred = self.nodeAt(idx-1)
       removedNode = pred.next
       pred.next = removedNode.next
  
   return removedNode.element
print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array


h1.forwardprint() # This should print: 10,20,30,40.
h1.backwardprint() # This should print: 40,30,20,10.
print(h1.countNode()) # This should print: 4


print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"


print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that
#doesn't exists in the list this will print -1.


print("///  Test 04  ///")


a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40. 


# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40.
h2.backwardprint() # This should print: 40,30,20,10,85.


print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40. 
h2.backwardprint() # This should print: 40,30,95,20,10,80. 


print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75.
h2.backwardprint() # This should print: 75,40,30,95,20,10,85.




print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70. 


# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: ", h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70. 
h3.backwardprint() # This should print: 70,60,50,40,30,20. 
print("Removed element: ", h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70. 
h3.backwardprint() # This should print: 70,60,40,30,20. 
print("Removed element: ", h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60.
h3.backwardprint() # This should print: 60,40,30,20.